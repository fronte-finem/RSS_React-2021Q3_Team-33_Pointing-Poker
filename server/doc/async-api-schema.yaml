asyncapi: 2.1.0

info:
  title: Pointing Poker
  version: 1.0.0
  description: |
    Приложение для проведения сессий по оценке сложности предстоящей работы или\
    относительного объёма решаемых задач при разработке программного обеспечения
    ---
    При подключении нового сокета, сервер ожидет от него два вида запросов:
    - `create game` - в случае успешной валидации:
        - создает игру;
        - назначает сокету роль дилера;
        - начинает слушать запросы для этого сокета:
           - на участие в чате
           - на управление игрой
           - на участие в игре (если выбрана опция в настройках)
    - `join game` - в случае успешной валидации:
        - подключает к игре этот сокет под ролью игрока или зрителя;
        - начинает слушать запросы для этого сокет:
           - на участие в чате
           - на участие в игре (если роль - игрок)

servers:
  demo:
    url: localhost
    protocol: ws

channels:
  /:
    publish:
      description: |
        ## Набор событий инициируемых клиентом.
      message:
        oneOf:
          - $ref: '#/components/messages/CreateGame'
          - $ref: '#/components/messages/CancelGame'
          - $ref: '#/components/messages/JoinGame'
          - $ref: '#/components/messages/AddUser'
          - $ref: '#/components/messages/IsUserJoinAllowed'
          - $ref: '#/components/messages/PostMessage'
          - $ref: '#/components/messages/KickUser'
          - $ref: '#/components/messages/VoteToKickUser'
          - $ref: '#/components/messages/AddIssue'
          - $ref: '#/components/messages/StartGame'
          - $ref: '#/components/messages/EndGame'
          - $ref: '#/components/messages/StartRound'
          - $ref: '#/components/messages/EndRound'
          - $ref: '#/components/messages/AddScore'

    subscribe:
      description: |
        ## Набор событий инициируемыех сервером.
      message:
        oneOf:
          - $ref: '#/components/messages/CreateGameFailed'
          - $ref: '#/components/messages/GameCreated'
          - $ref: '#/components/messages/CancelGameFailed'
          - $ref: '#/components/messages/GameCanceled'
          - $ref: '#/components/messages/JoinGameFailed'
          - $ref: '#/components/messages/ReadyToAddUser'
          - $ref: '#/components/messages/AllowUserJoin'
          - $ref: '#/components/messages/LoginError'
          - $ref: '#/components/messages/LoggedIn'
          - $ref: '#/components/messages/UserJoined'
          - $ref: '#/components/messages/PostMessageFailed'
          - $ref: '#/components/messages/MessagePosted'
          - $ref: '#/components/messages/KickUserFailed'
          - $ref: '#/components/messages/KickVoteStarted'
          - $ref: '#/components/messages/VoteToKickUserFailed'
          - $ref: '#/components/messages/UserKickResult'
          - $ref: '#/components/messages/Kicked'
          - $ref: '#/components/messages/AddIssueFailed'
          - $ref: '#/components/messages/IssueAdded'
          - $ref: '#/components/messages/StartGameFailed'
          - $ref: '#/components/messages/GameStarted'
          - $ref: '#/components/messages/EndGameFailed'
          - $ref: '#/components/messages/GameEnded'
          - $ref: '#/components/messages/StartRoundFailed'
          - $ref: '#/components/messages/RoundStarted'
          - $ref: '#/components/messages/EndRoundFailed'
          - $ref: '#/components/messages/RoundEnded'
          - $ref: '#/components/messages/AddScoreFailed'
          - $ref: '#/components/messages/ScoreAdded'

components:
  schemas:
    UserBase:
      description: |
        Минимальный объект пользователя (дилера),\
        ожидаемый сервером при запросе создания игры.
      type: object
      required:
        - firstName
      properties:
        firstName:
          type: string
        lastName:
          type: [string, 'null']
        jobPosition:
          type: [string, 'null']
        avatar:
          type: [string, 'null']

    UserToJoin:
      description: |
        Объект пользователя (игрока или наблюдателя) игры,\
        ожидаемый сервером при запросе присоединения к игре.
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - role
          properties:
            role:
              type: string
              enum:
                - 'gamer'
                - 'spectator'

    User:
      description: |
        Объект пользователя игры (дилер/игрок/набдюдатель),\
        возвращаемый сервером при различных событиях.
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - id
            - role
          properties:
            id:
              type: string
            role:
              type: string
              enum:
                - 'dealer'
                - 'gamer'
                - 'spectator'

    ChatMessage:
      description: |
        Обект сообщения чата
      type: object
      properties:
        userId:
          type: string
        message:
          type: string

    Issue:
      description: |
        Обект задачи для оценки в процессе игры.
      type: object
      properties:
        title:
          type: string
        priority:
          type: string
          enum:
            - high
            - low

    Score:
      description: |
        Значение игровой карты (число или названи особенной карты).
      type: [number, string]

    UserScore:
      description: |
        Объект оценки поставленной игроком.
      type: object
      properties:
        userId:
          type: string
        score:
          $ref: '#/components/schemas/Score'

    RoundResult:
      description: |
        Массив оценок выставленных игроками.
      type: array
      items:
        $ref: '#/components/schemas/UserScore'

    GameResult:
      description: |
        Массив всех оценённых задач.
      type: array
      items:
        type: object
        properties:
          issue:
            $ref: '#/components/schemas/Issue'
          result:
            $ref: '#/components/schemas/RoundResult'

    CardSet:
      description: |
        Тип набора карт:
        - числа Фибоначчи;
        - степени двойки;
        - или массив собственной последовательности;
      oneOf:
        - type: string
          enum:
            - 'fibonacci'
            - 'pow2'
        - type: array
          items:
            $ref: '#/components/schemas/Score'

    GameSettings:
      description: |
        Набор настроек игры.
      type: object
      properties:
        dealerGamer:
          description: |
            Будет ли дилер принимать участие в игре.
          type: boolean
        cardsSet:
          description: |
            Какой набор карточек будет использоваться.
          $ref: '#/components/schemas/CardSet'
        autoJoinToGame:
          description: |
            Если игра уже началась:
            - впускать автоматически всех новых участников;
            - или впускать через механизм admit/reject;
          type: boolean
        autoOpenCards:
          description: |
            Будут ли карты переворачиваться автоматически,
            как только все проголосуют.
          type: boolean
        changeAfterRoundEnd:
          description: |
            Можно ли менять свой выбор после того,
            как все карты уже перевернуты.
          type: boolean
        timeout:
          description: |
            Конфигурации времени таймера или null если он ненужен.
          type: [number, 'null']

    UsersArray:
      description: |
        Массив пользователей в игре.
      type: array
      items:
        $ref: '#/components/schemas/User'

    IssuesArray:
      description: |
        Массив задач добавленных дилером для последующей оценки.
      type: array
      items:
        $ref: '#/components/schemas/Issue'

    MessagesArray:
      description: |
        Массив сообщений в чате.
      type: array
      items:
        $ref: '#/components/schemas/ChatMessage'

  messages:
    CreateGame:
      name: 'create game'
      description: |
        Запрос на создание игры (комнаты в терминологии socket.io).\
        Необходим валидный объект пользователя-дилера.
      payload:
        $ref: '#/components/schemas/UserBase'

    CreateGameFailed:
      name: 'create game failed'
      description: |
        Уведомление на сокет дилера.\
        Валидация объекта пользователя-дилера не прошла.\
        Игра не создана, например по причине:
        - пустое имя дилера;
      payload:
        description: |
          описание причины проваленной валидации
        type: string
        example: 'dealer name required!'

    GameCreated:
      name: 'game created'
      description: |
        Уведомление на сокет дилера.\
        Валидация объекта пользователя-дилера прошла.\
        Игра создана.
      payload:
        type: object
        properties:
          gameId:
            type: string
          gameSettings:
            $ref: '#/components/schemas/GameSettings'
          users:
            type: array
            items:
              $ref: '#/components/schemas/User'

    CancelGame:
      name: 'cancel game'
      description: |
        Запрос на отмену игры принимается только от сокета дилера.\
        Проходит валидацю на активность игры для полученого ID.
      payload:
        description: |
          game-ID
        type: string

    CancelGameFailed:
      name: 'cancel game failed'
      description: |
        Уведомление на сокет дилера.\
        Отменить не получилось, например по причине:
        - игра не активна;
      payload:
        description: |
          описание причины отказа в отмене игры
        type: string
        example: 'Game already not active!'

    GameCanceled:
      name: 'game canceled'
      description: |
        Уведомление на все сокеты в игре.\
        Игра - отмененена.

    JoinGame:
      name: 'join game'
      description: |
        Запрос на присоединение к игре по айди.\
        Если валидация прошла ожидается запрос на создание пользователя от этого сокета
      payload:
        description: game-ID
        type: string

    JoinGameFailed:
      name: 'join game failed'
      description: |
        Уведомление на сокет запросившего присоединение.\
        Присоединение к игре не получислось, например по причине:
        - игры с game-ID не существует;
        - игра с game-ID уже не активна;
      payload:
        description: |
          описание причины проваленной валидации
        type: string
        example: 'Game already not active!'

    ReadyToAddUser:
      name: 'ready to add user'
      description: |
        Уведомление на сокет запросившего присоединение.\
        Валидация game-ID пройдена.\
        Сервер готов обработаь запрос на созание участника игры от этого сокета.

    AddUser:
      name: 'add user'
      description: |
        Запрос на создание пользователя от сокета прошедшего валидаю на присоединение к игре.\
        Если игра уже стартовала, и дилер установил подтверждение на вход - на сокет дилера\
        приходит уведомление `AllowUserJoin`
      payload:
        $ref: '#/components/schemas/UserToJoin'

    AllowUserJoin:
      name: 'allow user join to game'
      description: |
        Уведомление на сокет дилера о присоединении пользователя, если игра уже идет,\
        и стоит настройка пускать только после подтверждения.
      payload:
        $ref: '#/components/schemas/UserToJoin'

    IsUserJoinAllowed:
      name: 'allow user join to game'
      description: |
        Запрос от сокета дилера с разрешением или запретом присоединении пользователя,\
        если игра уже идет, и стоит настройка пускать только после подтверждения.
      payload:
        type: boolean

    LoginError:
      name: 'login error'
      description: |
        Уведомление на сокет запросившего присоединение и создание пользователя.\
        Валидация не прошла, например по причине:
        - пустое имя пользователя;
        - пользователь с такими же данными уже участвует;
        - дилер запретил вход в уже идущую игру;
      payload:
        description: |
          описание причины проваленной валидации
        type: string
        example: 'Game started, dealer rejected your join!'

    LoggedIn:
      name: 'logged in'
      description: |
        Уведомление на сокет запросившего присоединение и создание пользователя.\
        Валидация прошла успешно.
      payload:
        type: object
        properties:
          gameId:
            type: string
          users:
            $ref: '#/components/schemas/UsersArray'
          issues:
            $ref: '#/components/schemas/IssuesArray'
          messages:
            description: |
              Eсли игра уже началась - сервер вернет пустой массив,\
              инaче массив всех (или N последних) сообщений.
            $ref: '#/components/schemas/MessagesArray'
          gameSettings:
            description: |
              Eсли игра еще не началась - сервер вернет `undefined`,\
              инaче выбранные дилером настройки.
            $ref: '#/components/schemas/GameSettings'
          gameResult:
            description: |
              Eсли игра еще не началась - сервер вернет `undefined`,\
              инaче результаты пройденых раундов.
            $ref: '#/components/schemas/GameResult'

    UserJoined:
      name: 'user joined'
      description: |
        Уведомление всем сокетам в игре - присоединился новый пользователь.
      payload:
        $ref: '#/components/schemas/User'

    PostMessage:
      name: 'post message'
      description: |
        Запрос с сообщением в чат.
      payload:
        type: string

    PostMessageFailed:
      name: 'post message failed'
      description: |
        Уведомление на сокет отправившего сообщение в чат.\
        Валидация не прошла, например по причине:
        - пустое сообщение;
        - слишком длинное сообщение;
      payload:
        description: |
          описание причины проваленной валидации
        type: string
        example: 'Empty messages not allowed!'

    MessagePosted:
      name: 'chat message added'
      description: |
        Уведомление всем сокетам в игре.\
        В чате новое сообщение.
      payload:
        $ref: '#/components/schemas/ChatMessage'

    KickUser:
      name: 'kick user'
      description: |
        Запрос на удаление пользователя.\
        Обработка зависит от роли пользователя на запросившем сокете:
        - дилер - сразу удаляет;
        - игрок/наблюдатель - запускает голосование;
      payload:
        description: |
          ожидается `user-id` пользователя для удаления
        type: string
        example: 'some_bad_user_id_1234567890-xyz'

    KickUserFailed:
      name: 'kick user failed'
      description: |
        Уведомление на сокет запросившего удаление о неудачной валидации, например:
        - себя удалить нельзя;
        - дилера удалить нельзя;
        - в лобби менее 3 человек, не считая дилера;
        - этого пользователя уже нет в игре;
        - в данный момент уже идет голосование;
      payload:
        description: |
          описание причины проваленной валидации
        type: string
        example:
          - 'Self-kick not supported!'
          - 'Kick of dealer forbidden!'
          - 'Not enough users for start kick vote!'
          - 'User with that id not exist in current game!'
          - 'Kick-voting is active now, wait for it to end!'

    KickVoteStarted:
      name: 'kick vote started'
      description: |
        Уведомление всем сокетам в игре.\
        Начато голосование на удаление пользователя.
      payload:
        type: object
        properties:
          initiator:
            description: |
              пользователь начавший голосование
            $ref: '#/components/schemas/User'
          badUser:
            description: |
              пользователь на удаление
            $ref: '#/components/schemas/User'

    VoteToKickUser:
      description: |
        Запрос с голосом по удалению участника:
        - `true` - за удаление;
        - `false` - против удаления;
      name: 'vote to kick user'
      payload:
        type: boolean

    VoteToKickUserFailed:
      name: 'kick user failed'
      description: |
        Уведомление на сокет отправивший голос по удалению о неудачной обработке запроса,\
        возможные причины:
        - голосование уже закончено;
        - голос от виновника не принимается;
        - голос с данного сокета уже учтен;
      payload:
        description: |
          описание причины не прошедшего голоса
        type: string
        example:
          - 'kick vote ended!'

    UserKickResult:
      name: 'kick vote failed'
      description: |
        Уведомление всем сокетам в игре.\
        Был или нет удален пользователь и сообщение о причине, например:
        - удален дилером;
        - удален (не удален) большинством голосов;
      payload:
        type: object
        properties:
          user:
            $ref: '#/components/schemas/User'
          kicked:
            type: boolean
          reason:
            type: string
            example:
              - 'User kicked by dealer'
              - 'User not kicked by majority of votes'

    Kicked:
      name: 'kicked'
      description: |
        Уведомление на сокет удаленого пользователя.
      payload:
        description: |
          описание причины удаления
        type: string
        example:
          - 'Kicked by dealer'
          - 'Kicked by majority of votes'

    AddIssue:
      name: 'add issue'
      description: |
        Запрос на добавление новой задачи.\
        Сервер ожидает его только от сокета дилера.
      payload:
        $ref: '#/components/schemas/Issue'

    AddIssueFailed:
      name: 'add issue failed'
      description: |
        Уведомление на сокет дилера.\
        Неуспешная попытка добавить задачу, например по причинам:
        - пустое название;
        - дубль, такая задача уже есть;
      payload:
        description: |
          описание причины отказа в добавлении задачи
        type: string
        example:
          - 'Empty title'
          - 'Same issue already exist'

    IssueAdded:
      name: 'issue added'
      description: |
        Уведомление всем сокетам в игре.\
        Новая задача успешно добавлена.
      payload:
        $ref: '#/components/schemas/Issue'

    StartGame:
      name: 'start game'
      description: |
        Запрос на запуск игры с выбранными настройками.\
        Сервер ожидает его только от сокета дилера.
      payload:
        $ref: '#/components/schemas/GameSettings'

    StartGameFailed:
      name: 'start game failed'
      description: |
        Уведомление на сокет дилера.\
        Неуспешная попытка запустить игру, например по причинам:
        - нет задач для оценивания
        - нет игроков
      payload:
        description: |
          описание причины отказа в запуске игры
        type: string
        example:
          - 'No issues!'
          - 'No gamers!'

    GameStarted:
      name: 'game started'
      description: |
        Уведомление всем сокетам в игре.\
        Игра запиущена с настройками в ответе.
      payload:
        $ref: '#/components/schemas/GameSettings'

    EndGame:
      name: 'end game'
      description: |
        Запрос на остановку игры.\
        Сервер ожидает его только от сокета дилера.

    EndGameFailed:
      name: 'end game failed'
      description: |
        Уведомление на сокет дилера.\
        Неуспешная попытка остановить игру, например по причинам:
        - игра уже остановлена;
      payload:
        description: |
          описание причины отказа в остановке игры
        type: string
        example:
          - 'No active game!'

    GameEnded:
      name: 'game ended'
      description: |
        Уведомление всем сокетам в игре.\
        Игра закончена с результатами оценок в ответе.
      payload:
        $ref: '#/components/schemas/GameResult'

    StartRound:
      name: 'start round'
      description: |
        Запрос на запуск раунда оценок.\
        Сервер ожидает его только от сокета дилера.
      payload:
        description: id задачи
        type: string

    StartRoundFailed:
      name: 'start round failed'
      description: |
        Уведомление на сокет дилера.\
        Неуспешная попытка запустить раунд оценок, например по причинам:
        - предыдущий раунд еще не закончен;
      payload:
        description: |
          описание причины отказа в остановке игры
        type: string
        example:
          - 'Another round active now!'

    RoundStarted:
      name: 'round started'
      description: |
        Уведомление всем сокетам в игре.\
        Раунде по оценке задачи запущен.
      payload:
        description: |
          id задачи
        type: string

    EndRound:
      name: 'end round'
      description: |
        Запрос на остановку раунда оценок.\
        Сервер ожидает его только от сокета дилера.

    EndRoundFailed:
      name: 'end round failed'
      description: |
        Уведомление на сокет дилера.\
        Неуспешная попытка остановить раунд оценок, например по причинам:
        - нет активного раунда;
      payload:
        description: |
          описание причины отказа в остановке игры
        type: string
        example:
          - 'No active round!'

    RoundEnded:
      name: 'round ended'
      description: |
        Уведомление всем сокетам в игре.\
        Раунд закончен (после получения всех оценок или по таймеру или дилером).
      payload:
        $ref: '#/components/schemas/RoundResult'

    AddScore:
      name: 'add score'
      description: |
        Запрос на выставление задаче оценки из выбранной карты.
      payload:
        $ref: '#/components/schemas/Score'

    AddScoreFailed:
      name: 'add score failed'
      description: |
        Уведомление на сокет запросившего выставление оценки.\
        Валидация не пройдена, например по причинам:
        - сокет не имеет роли игрок
        - если это дилер, и не была включена опция, разрешающая принимать ему учатие в игре
      payload:
        description: |
          описание причины непройденной валидации
        type: string
        example:
          - 'You need to have role - gamer!'

    ScoreAdded:
      name: 'score added'
      description: |
        Уведомление всем сокетам в игре.\
        Пользователь с id в ответе выставил оценку.
      payload:
        description: |
          id пользователя, сделавшего выбор
        type: string
        example:
          - 'some-user-id'
